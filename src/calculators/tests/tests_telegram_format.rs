use super::super::telegram_format::*;

#[test]
fn test_001_validate_cs() {
    let frame: Vec<u8> = vec![0x08, 0x01, 0x72, 0x40, 0x69, 0x00, 0x33, 0xE1, 0x0E, 0x03, 0x00, 0x77, 0x08, 0x30, 0x85, 0x2F, 0x2F, 0x03, 0xFD, 0x08, 0x06, 0xC0, 0x00, 0x04, 0xFD, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x65, 0xAB, 0x09, 0x12, 0x65, 0xBE, 0x09, 0x22, 0x65, 0x3A, 0x09, 0x01, 0xFD, 0x48, 0x25, 0x04, 0x6D, 0x12, 0x10, 0x7E, 0x28, 0x02, 0x7C, 0x01, 0x48, 0x31, 0x00, 0x0F, 0x01, 0xFD, 0x62, 0xB7, 0x01, 0xFD, 0x7B, 0xCA, 0xE2];
    assert_eq!(
        TelegramFormat::validate_cs(&frame),
        Ok(())
    );
}
#[test]
fn test_002_validate_cs() {
    let frame: Vec<u8> = vec![0x00, 0x01, 0x72, 0x40, 0x69, 0x00, 0x33, 0xE1, 0x0E, 0x03, 0x00, 0x77, 0x08, 0x30, 0x85, 0x2F, 0x2F, 0x03, 0xFD, 0x08, 0x06, 0xC0, 0x00, 0x04, 0xFD, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x65, 0xAB, 0x09, 0x12, 0x65, 0xBE, 0x09, 0x22, 0x65, 0x3A, 0x09, 0x01, 0xFD, 0x48, 0x25, 0x04, 0x6D, 0x12, 0x10, 0x7E, 0x28, 0x02, 0x7C, 0x01, 0x48, 0x31, 0x00, 0x0F, 0x01, 0xFD, 0x62, 0xB7, 0x01, 0xFD, 0x7B, 0xCA, 0xE2];
    assert_eq!(
        TelegramFormat::validate_cs(&frame),
        Err(ParserError::MbusInvalidChecksum("0xE2 vs 0xDA".to_string()))
    );
}
#[test]
fn test_003_validate_cs() {
    let frame: Vec<u8> = vec![0x7B, 0x8B, 0x06];
    assert_eq!(
        TelegramFormat::validate_cs(&frame),
        Ok(())
    );
}
#[test]
fn test_004_validate_cs() {
    let frame: Vec<u8> = vec![0x00, 0x8B, 0x06];
    assert_eq!(
        TelegramFormat::validate_cs(&frame),
        Err(ParserError::MbusInvalidChecksum("0x06 vs 0x8B".to_string()))
    );
}
#[test]
fn test_001_validate_crc() {
    let frame: Vec<u8> = vec![0x2E, 0x44, 0x01, 0x06, 0x15, 0x30, 0x83, 0x96, 0x01, 0x02, 0xA6, 0xD3, 0x7A, 0xE0, 0x10, 0x20, 0x05, 0x7F, 0xD2, 0x5E, 0xC4, 0x65, 0x31, 0xD5, 0x98, 0x3A, 0xD5, 0x7C, 0x77, 0x82, 0xE1, 0x40, 0xAC, 0x48, 0xFC, 0x41, 0x79, 0x55, 0x95, 0x95, 0x13, 0x4F, 0x9E, 0x38, 0xE8, 0xC9, 0x3A, 0x1E, 0x5E, 0x63, 0xD8, 0x6C, 0x98, 0x39, 0x5C];
    assert_eq!(
        TelegramFormat::validate_crc_wmbus_format_a(&frame),
        Ok(())
    );
}
#[test]
fn test_002_validate_crc() {
    let frame: Vec<u8> = vec![0x00, 0x44, 0x01, 0x06, 0x15, 0x30, 0x83, 0x96, 0x01, 0x02, 0xA6, 0xD3, 0x7A, 0xE0, 0x10, 0x20, 0x05, 0x7F, 0xD2, 0x5E, 0xC4, 0x65, 0x31, 0xD5, 0x98, 0x3A, 0xD5, 0x7C, 0x77, 0x82, 0xE1, 0x40, 0xAC, 0x48, 0xFC, 0x41, 0x79, 0x55, 0x95, 0x95, 0x13, 0x4F, 0x9E, 0x38, 0xE8, 0xC9, 0x3A, 0x1E, 0x5E, 0x63, 0xD8, 0x6C, 0x98, 0x39, 0x5C];
    assert_eq!(
        TelegramFormat::validate_crc_wmbus_format_a(&frame),
        Err(ParserError::WmbusInvalidCrc("0xA6 0xD3 vs 0x1E 0x1F".to_string()))
    );
}
#[test]
fn test_001_calculate_telegram_format() {
    let frame: Vec<u8> = vec![0xE5];
    assert_eq!(
        TelegramFormat::calculate_telegram_format(&frame),
        Err(ParserError::TelegramFormatNotSupported)
    );
}
#[test]
fn test_002_calculate_telegram_format() {
    let frame: Vec<u8> = vec![0x10, 0x7B, 0x8B, 0x06, 0x16];
    assert_eq!(
        TelegramFormat::calculate_telegram_format(&frame),
        Err(ParserError::TelegramFormatNotSupported)
    );
}
#[test]
fn test_003_calculate_telegram_format() {
    let frame: Vec<u8> = vec![0x68, 0x03, 0x03, 0x68, 0x53, 0x01, 0x51, 0xA5, 0x16];
    assert_eq!(
        TelegramFormat::calculate_telegram_format(&frame),
        Err(ParserError::TelegramFormatNotSupported)
    );
}
#[test]
fn test_004_calculate_telegram_format() {
    let frame: Vec<u8> = vec![0x68, 0x43, 0x43, 0x68, 0x08, 0x01, 0x72, 0x40, 0x69, 0x00, 0x33, 0xE1, 0x0E, 0x03, 0x00, 0x77, 0x08, 0x30, 0x85, 0x2F, 0x2F, 0x03, 0xFD, 0x08, 0x06, 0xC0, 0x00, 0x04, 0xFD, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x65, 0xAB, 0x09, 0x12, 0x65, 0xBE, 0x09, 0x22, 0x65, 0x3A, 0x09, 0x01, 0xFD, 0x48, 0x25, 0x04, 0x6D, 0x12, 0x10, 0x7E, 0x28, 0x02, 0x7C, 0x01, 0x48, 0x31, 0x00, 0x0F, 0x01, 0xFD, 0x62, 0xB7, 0x01, 0xFD, 0x7B, 0xCA, 0xE2, 0x16];
    assert_eq!(
        TelegramFormat::calculate_telegram_format(&frame),
        Ok(TelegramFormat::LongFrameMBus)
    );
}
#[test]
fn test_005_calculate_telegram_format() {
    let frame: Vec<u8> = vec![0x2E, 0x44, 0x01, 0x06, 0x15, 0x30, 0x83, 0x96, 0x01, 0x02, 0xA6, 0xD3, 0x7A, 0xE0, 0x10, 0x20, 0x05, 0x7F, 0xD2, 0x5E, 0xC4, 0x65, 0x31, 0xD5, 0x98, 0x3A, 0xD5, 0x7C, 0x77, 0x82, 0xE1, 0x40, 0xAC, 0x48, 0xFC, 0x41, 0x79, 0x55, 0x95, 0x95, 0x13, 0x4F, 0x9E, 0x38, 0xE8, 0xC9, 0x3A, 0x1E, 0x5E, 0x63, 0xD8, 0x6C, 0x98, 0x39, 0x5C];
    assert_eq!(
        TelegramFormat::calculate_telegram_format(&frame),
        Ok(TelegramFormat::LongFrameWMBusFormatA)
    );
}
#[test]
fn test_006_calculate_telegram_format() {
    let frame: Vec<u8> = vec![];     
    assert_eq!(
        TelegramFormat::calculate_telegram_format(&frame),
        Err(ParserError::TelegramFormatCalculatorError)
    );
}
#[test]
fn test_007_calculate_telegram_format() {
    let frame: Vec<u8> = vec![0x2E, 0x44, 0x01, 0x06, 0x15, 0x30, 0x83, 0x96, 0x01, 0x02, 0xA6, 0x83, 0x96, 0x01, 0x02, 0xA6];
    assert_eq!(
        TelegramFormat::calculate_telegram_format(&frame),
        Err(ParserError::WmbusInvalidDatagramLength)
    );
}